const path = require('path')
const fs = require('fs').promises
const WorkflowCompile = require('@truffle/workflow-compile')
const Artifactor = require('@truffle/artifactor')

const Migrations = artifacts.require('Migrations')
const Dai = artifacts.require('Dai')
const Vat = artifacts.require('Vat')
const DaiJoin = artifacts.require('DaiJoin')
const Pot = artifacts.require('Pot')

module.exports = async function(deployer, network, [account]) {
	const chainId = await getChainId()
	await deployer.deploy(Migrations)
	await deployErc20(account)
	const dai = await deployer.deploy(Dai, chainId)
	const vat = await deployer.deploy(Vat)
	const pot = await deployer.deploy(Pot, vat.address)
	const daiJoin = await deployer.deploy(DaiJoin, vat.address, dai.address)
	const uniswapFactory = await deployUniswapFactory(deployer)
	await deployDaiHrd(deployer, dai, vat, pot, daiJoin, uniswapFactory)
}

async function getChainId() {
	return new Promise((resolve, reject) => {
		web3.currentProvider.send({id: '1', jsonrpc: '2.0', method: 'eth_chainId', params: []}, (_, response) => {
			if (response.result.error) reject(new Error(response.result.error))
			else resolve(Number.parseInt(response.result))
		})
	})
}

async function deployErc20(account) {
	// if ERC1820 is not yet deployed, then deploy it
	if (await web3.eth.getCode('0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24') === '0x') {
		console.log('deploying ERC1820')
		// send ETH to ERC1820 deployment address
		await web3.eth.sendTransaction({ from: account, to: '0xa990077c3205cbDf861e17Fa532eeB069cE9fF96', value: '0x11c37937e080000' })
		// deploy ERC1820
		await web3.eth.sendSignedTransaction('0xf90a388085174876e800830c35008080b909e5608060405234801561001057600080fd5b506109c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c010000000000000000000000000000000000000000000000000000000090048063a41e7d5111610078578063a41e7d51146101d4578063aabbb8ca1461020a578063b705676514610236578063f712f3e814610280576100a5565b806329965a1d146100aa5780633d584063146100e25780635df8122f1461012457806365ba36c114610152575b600080fd5b6100e0600480360360608110156100c057600080fd5b50600160a060020a038135811691602081013591604090910135166102b6565b005b610108600480360360208110156100f857600080fd5b5035600160a060020a0316610570565b60408051600160a060020a039092168252519081900360200190f35b6100e06004803603604081101561013a57600080fd5b50600160a060020a03813581169160200135166105bc565b6101c26004803603602081101561016857600080fd5b81019060208101813564010000000081111561018357600080fd5b82018360208201111561019557600080fd5b803590602001918460018302840111640100000000831117156101b757600080fd5b5090925090506106b3565b60408051918252519081900360200190f35b6100e0600480360360408110156101ea57600080fd5b508035600160a060020a03169060200135600160e060020a0319166106ee565b6101086004803603604081101561022057600080fd5b50600160a060020a038135169060200135610778565b61026c6004803603604081101561024c57600080fd5b508035600160a060020a03169060200135600160e060020a0319166107ef565b604080519115158252519081900360200190f35b61026c6004803603604081101561029657600080fd5b508035600160a060020a03169060200135600160e060020a0319166108aa565b6000600160a060020a038416156102cd57836102cf565b335b9050336102db82610570565b600160a060020a031614610339576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b6103428361092a565b15610397576040805160e560020a62461bcd02815260206004820152601a60248201527f4d757374206e6f7420626520616e204552433136352068617368000000000000604482015290519081900360640190fd5b600160a060020a038216158015906103b85750600160a060020a0382163314155b156104ff5760405160200180807f455243313832305f4143434550545f4d4147494300000000000000000000000081525060140190506040516020818303038152906040528051906020012082600160a060020a031663249cb3fa85846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600160a060020a0316600160a060020a031681526020019250505060206040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d60208110156104a857600080fd5b5051146104ff576040805160e560020a62461bcd02815260206004820181905260248201527f446f6573206e6f7420696d706c656d656e742074686520696e74657266616365604482015290519081900360640190fd5b600160a060020a03818116600081815260208181526040808320888452909152808220805473ffffffffffffffffffffffffffffffffffffffff19169487169485179055518692917f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a450505050565b600160a060020a03818116600090815260016020526040812054909116151561059a5750806105b7565b50600160a060020a03808216600090815260016020526040902054165b919050565b336105c683610570565b600160a060020a031614610624576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b81600160a060020a031681600160a060020a0316146106435780610646565b60005b600160a060020a03838116600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169585169590951790945592519184169290917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a43509190a35050565b600082826040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090505b92915050565b6106f882826107ef565b610703576000610705565b815b600160a060020a03928316600081815260208181526040808320600160e060020a031996909616808452958252808320805473ffffffffffffffffffffffffffffffffffffffff19169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b600080600160a060020a038416156107905783610792565b335b905061079d8361092a565b156107c357826107ad82826108aa565b6107b85760006107ba565b815b925050506106e8565b600160a060020a0390811660009081526020818152604080832086845290915290205416905092915050565b6000808061081d857f01ffc9a70000000000000000000000000000000000000000000000000000000061094c565b909250905081158061082d575080155b1561083d576000925050506106e8565b61084f85600160e060020a031961094c565b909250905081158061086057508015155b15610870576000925050506106e8565b61087a858561094c565b909250905060018214801561088f5750806001145b1561089f576001925050506106e8565b506000949350505050565b600160a060020a0382166000908152600260209081526040808320600160e060020a03198516845290915281205460ff1615156108f2576108eb83836107ef565b90506106e8565b50600160a060020a03808316600081815260208181526040808320600160e060020a0319871684529091529020549091161492915050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161590565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000008082526004820183905260009182919060208160248189617530fa90519096909550935050505056fea165627a7a72305820377f4a2d4301ede9949f163f319021a6e9c687c292a5e2b2c4734c126b524e6c00291ba01820182018201820182018201820182018201820182018201820182018201820a01820182018201820182018201820182018201820182018201820182018201820')
	}
}

async function deployUniswapFactory(deployer) {
	const contractName = 'UniswapFactory'
	const source = `contract Exchange():
    def setup(token_addr: address): modifying

NewExchange: event({token: indexed(address), exchange: indexed(address)})

exchangeTemplate: public(address)
tokenCount: public(uint256)
token_to_exchange: address[address]
exchange_to_token: address[address]
id_to_token: address[uint256]

@public
def initializeFactory(template: address):
    assert self.exchangeTemplate == ZERO_ADDRESS
    assert template != ZERO_ADDRESS
    self.exchangeTemplate = template

@public
def createExchange(token: address) -> address:
    assert token != ZERO_ADDRESS
    assert self.exchangeTemplate != ZERO_ADDRESS
    assert self.token_to_exchange[token] == ZERO_ADDRESS
    exchange: address = create_with_code_of(self.exchangeTemplate)
    Exchange(exchange).setup(token)
    self.token_to_exchange[token] = exchange
    self.exchange_to_token[exchange] = token
    token_id: uint256 = self.tokenCount + 1
    self.tokenCount = token_id
    self.id_to_token[token_id] = token
    log.NewExchange(token, exchange)
    return exchange

@public
@constant
def getExchange(token: address) -> address:
    return self.token_to_exchange[token]

@public
@constant
def getToken(exchange: address) -> address:
    return self.exchange_to_token[exchange]

@public
@constant
def getTokenWithId(token_id: uint256) -> address:
    return self.id_to_token[token_id]`
	const abi = [{"name":"NewExchange","inputs":[{"type":"address","name":"token","indexed":true},{"type":"address","name":"exchange","indexed":true}],"anonymous":false,"type":"event"},{"name":"initializeFactory","outputs":[],"inputs":[{"type":"address","name":"template"}],"constant":false,"payable":false,"type":"function","gas":35725},{"name":"createExchange","outputs":[{"type":"address","name":"out"}],"inputs":[{"type":"address","name":"token"}],"constant":false,"payable":false,"type":"function","gas":187911},{"name":"getExchange","outputs":[{"type":"address","name":"out"}],"inputs":[{"type":"address","name":"token"}],"constant":true,"payable":false,"type":"function","gas":715},{"name":"getToken","outputs":[{"type":"address","name":"out"}],"inputs":[{"type":"address","name":"exchange"}],"constant":true,"payable":false,"type":"function","gas":745},{"name":"getTokenWithId","outputs":[{"type":"address","name":"out"}],"inputs":[{"type":"uint256","name":"token_id"}],"constant":true,"payable":false,"type":"function","gas":736},{"name":"exchangeTemplate","outputs":[{"type":"address","name":"out"}],"inputs":[],"constant":true,"payable":false,"type":"function","gas":633},{"name":"tokenCount","outputs":[{"type":"uint256","name":"out"}],"inputs":[],"constant":true,"payable":false,"type":"function","gas":663}]
	const bytecode = '0x6103f056600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263538a3f0e60005114156100ed57602060046101403734156100b457600080fd5b60043560205181106100c557600080fd5b50600054156100d357600080fd5b60006101405114156100e457600080fd5b61014051600055005b631648f38e60005114156102bf576020600461014037341561010e57600080fd5b600435602051811061011f57600080fd5b50600061014051141561013157600080fd5b6000600054141561014157600080fd5b60026101405160e05260c052604060c020541561015d57600080fd5b7f602e600c600039602e6000f33660006000376110006000366000730000000000610180526c010000000000000000000000006000540261019b527f5af41558576110006000f30000000000000000000000000000000000000000006101af5260406101806000f0806101cf57600080fd5b61016052610160513b6101e157600080fd5b610160513014156101f157600080fd5b6000600060246366d3820361022052610140516102405261023c6000610160515af161021c57600080fd5b6101605160026101405160e05260c052604060c020556101405160036101605160e05260c052604060c02055600154600160015401101561025c57600080fd5b6001600154016102a0526102a0516001556101405160046102a05160e05260c052604060c0205561016051610140517f9d42cb017eb05bd8944ab536a8b35bc68085931dd5f4356489801453923953f960006000a36101605160005260206000f3005b6306f2bf62600051141561030e57602060046101403734156102e057600080fd5b60043560205181106102f157600080fd5b5060026101405160e05260c052604060c0205460005260206000f3005b6359770438600051141561035d576020600461014037341561032f57600080fd5b600435602051811061034057600080fd5b5060036101405160e05260c052604060c0205460005260206000f3005b63aa65a6c0600051141561039a576020600461014037341561037e57600080fd5b60046101405160e05260c052604060c0205460005260206000f3005b631c2bbd1860005114156103c05734156103b357600080fd5b60005460005260206000f3005b639f181b5e60005114156103e65734156103d957600080fd5b60015460005260206000f3005b60006000fd5b6100046103f0036100046000396100046103f0036000f3'
	await new Artifactor(path.join(__dirname, '..', 'build', 'contracts')).save({ contractName, abi, bytecode, source })
	// TODO: deploy UniswapFactory from deployment bytecode
	const uniswapFactory = artifacts.require('UniswapFactory')
	return deployer.deploy(uniswapFactory)
}

async function deployDaiHrd(deployer, dai, vat, pot, daiJoin, uniswapFactory) {
	// deploy daiHrd using values from previous deployment just so we have a stub for passing to `uniswapFactory.createExchange.call`
	const tempDaiHrdArtifact = artifacts.require('DaiHrd')
	const tempDaiHrdContract = await deployer.deploy(tempDaiHrdArtifact)
	const uniswapExchangeAddress = uniswapFactory.createExchange.sendTransaction(tempDaiHrdContract.address).on('transactionHash', console.log)
	console.log(await uniswapExchangeAddress)

	await fs.writeFile(path.join(__dirname, '..', 'contracts', 'RuntimeConstants.sol'),
`// THIS FILE IS AUTOGENERATED DURING MIGRATION, DO NOT EDIT BY HAND
pragma solidity 0.5.12;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IVat {
	function dai(address holder) external returns(uint256 attorontodai);
	function move(address holder, address recipient, uint256 attorontodai) external;
}

interface IDaiJoin {
	function live() external returns (uint256 boolean);
	function join(address holder, uint256 attodai) external;
	function exit(address holder, uint256 attodai) external;
}

interface IPot {
	function pie(address holder) external returns(uint256);
	function chi() external returns(uint256);
	function rho() external returns (uint256);
	function drip() external;
	function join(uint256 amount) external;
	function exit(uint256 amount) external;
}

contract RuntimeConstants {
	IERC20 constant public dai = IERC20(${dai.address.toString(16).padStart(40, '0')});
	IPot constant public pot = IPot(${pot.address.toString(16).padStart(40, '0')});
	IDaiJoin constant public daiJoin = IDaiJoin(${daiJoin.address.toString(16).padStart(40, '0')});
	IVat constant public vat = IVat(${vat.address.toString(16).padStart(40, '0')});
	address constant public uniswapExchange = ${uniswapExchangeAddress.toString(16).padStart(40, '0')};
}
`)

	// recompile DaiHrd.sol (easiest to just re-compile everything)
	await WorkflowCompile.compile(config)
	const DaiHrd = artifacts.require('DaiHrd')
	const daiHrd = await deployer.deploy(DaiHrd)
	console.log(await daiHrd.dai())
	// TODO: const uniswapExchange = uniswapFactory.createExchange(DaiHrd.address)
	// TODO: verify that DaiHrd.uniswapExchange() == uniswapExchange
	return daiHrd
}
